# JARVIS Multi-Service Docker Compose Configuration

version: '3.9'

services:
  # Core Database
  postgres:
    image: postgres:14-alpine
    container_name: jarvis-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-jarvis}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-jarvis_secure_password}
      POSTGRES_DB: ${POSTGRES_DB:-jarvis_db}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U jarvis"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - jarvis-network

  # Redis Cache & Pub/Sub
  redis:
    image: redis:7-alpine
    container_name: jarvis-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-jarvis_redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - jarvis-network

  # Consciousness Service
  consciousness:
    build:
      context: .
      dockerfile: deployment/docker/consciousness/Dockerfile
    container_name: jarvis-consciousness
    environment:
      - JARVIS_ENVIRONMENT=production
      - DATABASE_URL=postgresql://jarvis:${POSTGRES_PASSWORD:-jarvis_secure_password}@postgres:5432/jarvis_db
      - REDIS_URL=redis://:${REDIS_PASSWORD:-jarvis_redis_password}@redis:6379/0
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8001:8001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - jarvis-network
    restart: unless-stopped

  # Scheduler Service
  scheduler:
    build:
      context: .
      dockerfile: deployment/docker/scheduler/Dockerfile
    container_name: jarvis-scheduler
    environment:
      - JARVIS_ENVIRONMENT=production
      - DATABASE_URL=postgresql://jarvis:${POSTGRES_PASSWORD:-jarvis_secure_password}@postgres:5432/jarvis_db
      - REDIS_URL=redis://:${REDIS_PASSWORD:-jarvis_redis_password}@redis:6379/0
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8002:8002"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - jarvis-network
    restart: unless-stopped

  # Knowledge Service
  knowledge:
    build:
      context: .
      dockerfile: deployment/docker/knowledge/Dockerfile
    container_name: jarvis-knowledge
    environment:
      - JARVIS_ENVIRONMENT=production
      - DATABASE_URL=postgresql://jarvis:${POSTGRES_PASSWORD:-jarvis_secure_password}@postgres:5432/jarvis_db
      - REDIS_URL=redis://:${REDIS_PASSWORD:-jarvis_redis_password}@redis:6379/0
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8003:8003"
    volumes:
      - knowledge_data:/app/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - jarvis-network
    restart: unless-stopped

  # Monitoring Service
  monitoring:
    build:
      context: .
      dockerfile: deployment/docker/monitoring/Dockerfile
    container_name: jarvis-monitoring
    environment:
      - JARVIS_ENVIRONMENT=production
      - DATABASE_URL=postgresql://jarvis:${POSTGRES_PASSWORD:-jarvis_secure_password}@postgres:5432/jarvis_db
      - REDIS_URL=redis://:${REDIS_PASSWORD:-jarvis_redis_password}@redis:6379/0
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8004:8004"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - jarvis-network
    restart: unless-stopped

  # Main Orchestrator
  orchestrator:
    build:
      context: .
      dockerfile: deployment/docker/orchestrator/Dockerfile
    container_name: jarvis-orchestrator
    environment:
      - JARVIS_ENVIRONMENT=production
      - DATABASE_URL=postgresql://jarvis:${POSTGRES_PASSWORD:-jarvis_secure_password}@postgres:5432/jarvis_db
      - REDIS_URL=redis://:${REDIS_PASSWORD:-jarvis_redis_password}@redis:6379/0
      - CONSCIOUSNESS_SERVICE_URL=http://consciousness:8001
      - SCHEDULER_SERVICE_URL=http://scheduler:8002
      - KNOWLEDGE_SERVICE_URL=http://knowledge:8003
      - MONITORING_SERVICE_URL=http://monitoring:8004
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - GITHUB_TOKEN=${GITHUB_TOKEN}
    depends_on:
      consciousness:
        condition: service_healthy
      scheduler:
        condition: service_healthy
      knowledge:
        condition: service_healthy
      monitoring:
        condition: service_healthy
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - jarvis-network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: jarvis-nginx
    volumes:
      - ./deployment/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./deployment/nginx/ssl:/etc/nginx/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - orchestrator
    networks:
      - jarvis-network
    restart: unless-stopped

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: jarvis-prometheus
    volumes:
      - ./deployment/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "9090:9090"
    networks:
      - jarvis-network
    restart: unless-stopped

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: jarvis-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deployment/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./deployment/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - jarvis-network
    restart: unless-stopped

  # Jaeger Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jarvis-jaeger
    environment:
      - COLLECTOR_ZIPKIN_HTTP_PORT=9411
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
      - "9411:9411"
    networks:
      - jarvis-network
    restart: unless-stopped

networks:
  jarvis-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
  redis_data:
  knowledge_data:
  prometheus_data:
  grafana_data: