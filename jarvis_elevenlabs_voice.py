#!/usr/bin/env python3
"""
JARVIS with Ultra-Realistic ElevenLabs Voice
This uses your ElevenLabs API key for human-like speech!
"""

import os
import sys
import json
import asyncio
import threading
from datetime import datetime

# Install elevenlabs if needed
try:
    from elevenlabs import generate, play, set_api_key, voices
except ImportError:
    print("Installing ElevenLabs...")
    import subprocess
    subprocess.run([sys.executable, "-m", "pip", "install", "elevenlabs"])
    from elevenlabs import generate, play, set_api_key, voices

# Load environment variables
def load_env():
    env_path = os.path.join(os.path.dirname(__file__), '.env')
    if os.path.exists(env_path):
        with open(env_path, 'r') as f:
            for line in f:
                if '=' in line and not line.startswith('#'):
                    key, value = line.strip().split('=', 1)
                    os.environ[key] = value

load_env()

# Set up ElevenLabs
ELEVENLABS_API_KEY = os.getenv('ELEVENLABS_API_KEY')
if ELEVENLABS_API_KEY:
    set_api_key(ELEVENLABS_API_KEY)
    print("‚úÖ ElevenLabs Ultra-Realistic Voice configured!")
else:
    print("‚ùå ElevenLabs API key not found in .env")

class JARVISVoice:
    def __init__(self):
        self.voice_id = "21m00Tcm4TlvDq8ikWAM"  # Rachel voice (very natural)
        # Other great options:
        # "EXAVITQu4vr4xnSDxMaL" - Bella (warm female)
        # "ErXwobaYiN019PkySvjV" - Antoni (professional male)
        # "MF3mGyEYCl7XYWbV9V6O" - Elli (energetic female)
        
    def speak(self, text):
        """Generate and play ultra-realistic speech"""
        try:
            print(f"üéôÔ∏è Speaking: {text[:50]}...")
            audio = generate(
                text=text,
                voice=self.voice_id,
                model="eleven_monolingual_v1"
            )
            play(audio)
        except Exception as e:
            print(f"Voice error: {e}")
            # Fallback to system voice
            self.speak_fallback(text)
    
    def speak_fallback(self, text):
        """Fallback to system TTS"""
        try:
            import pyttsx3
            engine = pyttsx3.init()
            engine.say(text)
            engine.runAndWait()
        except:
            pass
    
    async def speak_async(self, text):
        """Async version for non-blocking speech"""
        loop = asyncio.get_event_loop()
        await loop.run_in_executor(None, self.speak, text)

# Test the voice
if __name__ == "__main__":
    print("\nüé§ JARVIS Ultra-Realistic Voice Test\n")
    
    voice = JARVISVoice()
    
    # List available voices
    print("Available voices:")
    try:
        available_voices = voices()
        for v in available_voices:
            print(f"  ‚Ä¢ {v.name} ({v.voice_id})")
    except:
        pass
    
    print("\nüß™ Testing ultra-realistic speech...\n")
    
    test_phrases = [
        "Hello, I'm JARVIS, your advanced AI assistant.",
        "The voice you're hearing is generated by ElevenLabs, making me sound incredibly human.",
        "I can express emotions, pause naturally, and even... whisper if needed.",
        "How may I assist you today?"
    ]
    
    for phrase in test_phrases:
        voice.speak(phrase)
    
    print("\n‚úÖ Voice test complete!")
    print("\nüí° To use different voices, change voice_id in the code.")
    print("   Try 'EXAVITQu4vr4xnSDxMaL' for Bella or 'ErXwobaYiN019PkySvjV' for Antoni")
