name: Jarvis CI/CD Pipeline
# Agent: CI/CD Engineer
# Phase: 5 - Automated Quality Gates

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.12'
  NODE_VERSION: '20'
  POETRY_VERSION: '1.8.2'

jobs:
  # Python Services Quality Checks
  python-quality:
    name: Python ${{ matrix.service }} Quality
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        service: [orchestrator, core, plugins]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true
      
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: services/${{ matrix.service }}/.venv
          key: venv-${{ runner.os }}-${{ matrix.service }}-${{ hashFiles('**/poetry.lock') }}
      
      - name: Install dependencies
        working-directory: services/${{ matrix.service }}
        run: poetry install --no-interaction --no-root
      
      - name: Run linting
        working-directory: services/${{ matrix.service }}
        run: |
          poetry run ruff check src tests
          poetry run black --check src tests
      
      - name: Run type checking
        working-directory: services/${{ matrix.service }}
        run: poetry run mypy src
      
      - name: Run tests
        working-directory: services/${{ matrix.service }}
        run: poetry run pytest --cov=src --cov-report=xml
      
      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          file: services/${{ matrix.service }}/coverage.xml
          flags: ${{ matrix.service }}

  # Frontend Quality Checks
  frontend-quality:
    name: Frontend Quality
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: services/ui/package-lock.json
      
      - name: Install dependencies
        working-directory: services/ui
        run: npm ci
      
      - name: Run linting
        working-directory: services/ui
        run: npm run lint
      
      - name: Run type checking
        working-directory: services/ui
        run: npm run type-check
      
      - name: Run tests
        working-directory: services/ui
        run: npm test -- --coverage
      
      - name: Build application
        working-directory: services/ui
        run: npm run build

  # Mobile App Checks
  mobile-quality:
    name: Mobile App Quality
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: services/mobile_app/package-lock.json
      
      - name: Install dependencies
        working-directory: services/mobile_app
        run: npm ci
      
      - name: Run linting
        working-directory: services/mobile_app
        run: npm run lint
      
      - name: Run tests
        working-directory: services/mobile_app
        run: npm test

  # Docker Build & Push
  docker-build:
    name: Docker Build ${{ matrix.service }}
    needs: [python-quality, frontend-quality]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    strategy:
      matrix:
        service: [orchestrator, ui]
    
    permissions:
      contents: read
      packages: write
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: services/${{ matrix.service }}
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/jarvis-${{ matrix.service }}:latest
            ghcr.io/${{ github.repository_owner }}/jarvis-${{ matrix.service }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Security Scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # Documentation Build
  docs-build:
    name: Documentation Build
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install MkDocs
        run: |
          pip install mkdocs-material mkdocs-mermaid2-plugin
      
      - name: Build documentation
        run: mkdocs build
      
      - name: Deploy to GitHub Pages
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./site

  # Release
  release:
    name: Create Release
    needs: [python-quality, frontend-quality, docker-build]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Bump version and create tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.tag_version.outputs.new_tag }}
          name: Release ${{ steps.tag_version.outputs.new_tag }}
          body: ${{ steps.tag_version.outputs.changelog }}
          draft: false
          prerelease: false