version: '3.9'

# Jarvis AI Ecosystem Docker Compose
# Agent: Docker Captain
# Complete containerized deployment

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: jarvis-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-jarvis}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-jarvis-db-password}
      POSTGRES_DB: ${POSTGRES_DB:-jarvis}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-jarvis}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: jarvis-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-jarvis-redis-password}
    volumes:
      - redis-data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Orchestrator Service
  orchestrator:
    build:
      context: ./services/orchestrator
      dockerfile: ../../jarvis-triage-scripts/dockerfiles/orchestrator.Dockerfile
    container_name: jarvis-orchestrator
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-jarvis}:${POSTGRES_PASSWORD:-jarvis-db-password}@postgres:5432/${POSTGRES_DB:-jarvis}
      REDIS_URL: redis://:${REDIS_PASSWORD:-jarvis-redis-password}@redis:6379/0
      SECRET_KEY: ${SECRET_KEY:-change-me-in-production}
      ENVIRONMENT: ${ENVIRONMENT:-development}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    volumes:
      - ./services/orchestrator/src:/app/src:ro
      - ./config:/app/config:ro
      - orchestrator-logs:/app/logs
    ports:
      - "${ORCHESTRATOR_PORT:-8000}:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # UI Service
  ui:
    build:
      context: ./services/ui
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_API_URL: http://localhost:${ORCHESTRATOR_PORT:-8000}
        NEXT_PUBLIC_WS_URL: ws://localhost:${ORCHESTRATOR_PORT:-8000}
    container_name: jarvis-ui
    restart: unless-stopped
    depends_on:
      - orchestrator
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      NEXT_PUBLIC_API_URL: http://localhost:${ORCHESTRATOR_PORT:-8000}
      NEXT_PUBLIC_WS_URL: ws://localhost:${ORCHESTRATOR_PORT:-8000}
    volumes:
      - ./services/ui:/app:ro
      - /app/node_modules
      - /app/.next
    ports:
      - "${UI_PORT:-3000}:3000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: jarvis-nginx
    restart: unless-stopped
    depends_on:
      - orchestrator
      - ui
    volumes:
      - ./infra/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./infra/nginx/conf.d:/etc/nginx/conf.d:ro
      - nginx-logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    profiles:
      - production

  # Monitoring Stack (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: jarvis-prometheus
    restart: unless-stopped
    volumes:
      - ./infra/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: jarvis-grafana
    restart: unless-stopped
    depends_on:
      - prometheus
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./infra/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./infra/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3001:3000"
    profiles:
      - monitoring

volumes:
  postgres-data:
  redis-data:
  orchestrator-logs:
  nginx-logs:
  prometheus-data:
  grafana-data:

networks:
  default:
    name: jarvis-network
    driver: bridge