name: JARVIS CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.10'
  REDIS_VERSION: '7'
  POSTGRES_VERSION: '15'

jobs:
  lint:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
    
    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install black flake8 mypy pylint
    
    - name: Run Black
      run: black --check .
    
    - name: Run Flake8
      run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    
    - name: Run MyPy
      run: mypy core/ --ignore-missing-imports
    
    - name: Run Pylint
      run: pylint core/ --exit-zero

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: jarvis
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: jarvis_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg portaudio19-dev
    
    - name: Install Python dependencies
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov
    
    - name: Set up environment
      run: |
        cp .env.example .env
        echo "DATABASE_URL=postgresql://jarvis:test_password@localhost:5432/jarvis_test" >> .env
        echo "REDIS_HOST=localhost" >> .env
        echo "OPENAI_API_KEY=test_key" >> .env
        echo "ELEVENLABS_API_KEY=test_key" >> .env
        echo "GEMINI_API_KEY=test_key" >> .env
    
    - name: Run tests with coverage
      run: |
        pytest tests/ -v --cov=core --cov-report=xml --cov-report=html
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        severity: 'CRITICAL,HIGH'
    
    - name: Run Bandit security linter
      run: |
        pip install bandit
        bandit -r core/ -f json -o bandit-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json

  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Log in to GitHub Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: |
          ghcr.io/${{ github.repository }}:latest
          ghcr.io/${{ github.repository }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy notification
      run: |
        echo "üöÄ JARVIS would be deployed to staging here"
        echo "This is a private family project - manual deployment preferred"

  notify:
    name: Notify Status
    runs-on: ubuntu-latest
    needs: [lint, test, security, build]
    if: always()
    
    steps:
    - name: Send notification
      run: |
        if [ "${{ needs.test.result }}" == "success" ]; then
          echo "‚úÖ JARVIS CI pipeline passed!"
        else
          echo "‚ùå JARVIS CI pipeline failed"
        fi