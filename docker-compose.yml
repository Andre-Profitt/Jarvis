version: '3.8'

services:
  # Redis for state management and caching
  redis:
    image: redis:7-alpine
    container_name: jarvis-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # PostgreSQL for persistent storage
  postgres:
    image: postgres:15-alpine
    container_name: jarvis-postgres
    environment:
      POSTGRES_USER: jarvis
      POSTGRES_PASSWORD: ${DB_PASSWORD:-jarvis_secure_password}
      POSTGRES_DB: jarvis_db
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U jarvis"]
      interval: 5s
      timeout: 3s
      retries: 5

  # JARVIS Core Service
  jarvis-core:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: jarvis-core
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      - REDIS_HOST=redis
      - DATABASE_URL=postgresql://jarvis:${DB_PASSWORD:-jarvis_secure_password}@postgres:5432/jarvis_db
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ELEVENLABS_API_KEY=${ELEVENLABS_API_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
    volumes:
      - ./models:/app/models
      - ./logs:/app/logs
      - ./training_data:/app/training_data
    ports:
      - "8765:8765"  # WebSocket
      - "8000:8000"  # API
    restart: unless-stopped
    command: python3 LAUNCH-JARVIS-REAL.py

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: jarvis-prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: jarvis-grafana
    depends_on:
      - prometheus
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3000:3000"
    restart: unless-stopped

  # Ray Head Node for distributed computing
  ray-head:
    image: rayproject/ray:latest
    container_name: jarvis-ray-head
    ports:
      - "8265:8265"  # Ray dashboard
      - "10001:10001"  # Ray client
    environment:
      - RAY_HEAD=1
    command: ray start --head --dashboard-host=0.0.0.0
    restart: unless-stopped

  # Jupyter Lab for development and testing
  jupyter:
    build:
      context: .
      dockerfile: Dockerfile.jupyter
    container_name: jarvis-jupyter
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - JUPYTER_TOKEN=${JUPYTER_TOKEN:-jarvis}
    volumes:
      - ./notebooks:/home/jovyan/work
      - ./models:/home/jovyan/models
      - ./training_data:/home/jovyan/training_data
    ports:
      - "8888:8888"
    restart: unless-stopped

volumes:
  redis-data:
  postgres-data:
  prometheus-data:
  grafana-data:

networks:
  default:
    name: jarvis-network